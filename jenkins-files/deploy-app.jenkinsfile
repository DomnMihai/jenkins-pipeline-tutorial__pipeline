@Library(value="pipeline-shared-lib@main", changelog=false) _
import cicd.config.DeploymentConfigs;

Map cicdProjectConfigMap = null;
final Map deploymentConfigMap = [
  jenkinsWorkspace: [
    deploymentFolderPath: null
  ]
];

pipeline {
  agent any

  options {
    timeout(activity: true, time: 5, unit: 'MINUTES');
    skipDefaultCheckout(true);
    timestamps();
  }

  stages {
    stage("Init") {
      options {
        timeout(time: 5, unit: 'MINUTES');
      }
      steps {
        script {
          // Print parameters
          echo("PARAM source_branch: '${params.source_branch}'");

          // Clean workspace
          cleanWs();

          // Read pipeline configuration
          DeploymentConfigs.jobInstance = this;
          DeploymentConfigs.loadGlobalConfigs();

          // Set initial environment variables
          readPipelineName();
        }
      }
    }

    stage("Clone project repository") {
      options {
        timeout(time: 3, unit: 'MINUTES');
      }
      steps {
        script {
          final String repositoryName = env.p_PROJECT_NAME;
          final String sourceBranch = params.source_branch;

          cloneProjectRepository(repositoryName, sourceBranch);
        }
      }
    }

    stage("Read project config") {
      options {
        timeout(time: 10, unit: "SECONDS");
      }
      steps {
        script {
          cicdProjectConfigMap = readCicdProjectConfig();
          echo("cicdProjectConfigMap:\n" + writeYaml(data: cicdProjectConfigMap, returnText: true));
        }
      }
    }

    stage("Install dependencies") {
      options {
        timeout(time: 3, unit: 'MINUTES');
      }
      steps {
        script {
          installDependencies(false);
        }
      }
    }

    stage("Run unit tests") {
      options {
        timeout(time: 1, unit: 'MINUTES');
      }
      steps {
        script {
          runUnitTests();
        }
      }
    }

    stage("Create deployment folder") {
      options {
        timeout(time: 5, unit: 'SECONDS');
      }
      steps {
        script {
          final String deploymentFolderPath = "__deployment_${env.BUILD_NUMBER}";
          deploymentConfigMap["jenkinsWorkspace"]["deploymentFolderPath"] = deploymentFolderPath;

          sh(script: "mkdir ${deploymentFolderPath}", label: "Create deployment folder");
          dir(deploymentFolderPath) {
            echo("Deployment folder created at path '${pwd()}'");
          }
        }
      }
    }

    stage("Prepare files for deployment") {
      options {
        timeout(time: 60, unit: 'SECONDS');
      }
      steps {
        script {
          final String deploymentFolderPath = deploymentConfigMap["jenkinsWorkspace"]["deploymentFolderPath"];
          final List<String> filesToCopyList = cicdProjectConfigMap["filesToDeploy"];

          filesToCopyList.each({ String file ->
            sh(script: "cp --recursive ${file} ${deploymentFolderPath}", label: "Copy files for deployment");
          });
        }
      }
    }

    stage("Install production dependencies") {
      options {
        timeout(time: 3, unit: 'MINUTES');
      }
      steps {
        script {
          final String deploymentFolderPath = deploymentConfigMap["jenkinsWorkspace"]["deploymentFolderPath"];
          dir(deploymentFolderPath) {
            installDependencies(true);
          }
        }
      }
    }

    stage("Archive new code") {
      options {
        timeout(time: 6, unit: 'MINUTES');
      }
      steps {
        script {
          final String deploymentFolderPath = deploymentConfigMap["jenkinsWorkspace"]["deploymentFolderPath"];
          zip(dir: deploymentFolderPath, zipFile: "new-code-${env.BUILD_NUMBER}.zip", archive: true, defaultExcludes: false);
        }
      }
    }

    stage("Stop nodejs-backend-app service") {
      options {
        timeout(time: 1, unit: 'MINUTES');
      }
      steps {
        script {
          final String systemdServiceName = cicdProjectConfigMap["systemdService"]["serviceName"];
          callSystemdService(command: "stop", serviceName: systemdServiceName);
        }
      }
    }
  }

  post {
    always {
      script {
        cleanWs();
      }
    }
  }
}
